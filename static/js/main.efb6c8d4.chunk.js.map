{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentSearch","setSearch","text","setText","searches","setSearches","highlights","setHighlights","highlightPointers","useRef","colors","highlightComponents","props","style","backgroundColor","ref","children","a","data","fetch","method","credentials","headers","body","JSON","stringify","response","json","className","Card","marginRight","marginLeft","marginTop","CardContent","Typography","sx","fontSize","fontFamily","flex","marginBottom","width","height","overflowY","value","highlight","onChange","newText","Button","variant","onClick","CardActions","Container","TextField","placeholder","newSearch","target","length","alert","includes","oldArray","flexDirection","map","elem","index","startIcon","fill","endIcon","console","log","filter","item","highlightRef","current","scrollIntoView","behavior","scrollToHighlight","borderRadius","getScores","then","i","start","end","component","processData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efb6c8d4.chunk.js","sourcesContent":["import './App.css';\r\nimport { useState, useRef } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { TextField } from '@mui/material';\r\nimport { Container, Typography, Card, CardContent, CardActions } from '@mui/material';\r\nimport CircleIcon from '@mui/icons-material/Circle';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { HighlightWithinTextarea } from 'react-highlight-within-textarea'\r\n\r\nfunction App() {\r\n  const [currentSearch, setSearch] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [searches, setSearches] = useState([]);\r\n  const [highlights, setHighlights] = useState([]);\r\n  let highlightPointers = [useRef(null), useRef(null), useRef(null), useRef(null), useRef(null), useRef(null), useRef(null)];\r\n  \r\n  let colors = ['yellow', 'aqua', 'pink', 'green', 'red', 'orange', 'gray'];\r\n\r\n  const YellowHighlight = (props) => {\r\n    return <mark style={{ backgroundColor: colors[0] }} ref={highlightPointers[0]}>{props.children}</mark>;\r\n  };\r\n\r\n  const AquaHighlight = (props) => {\r\n    return <mark style={{ backgroundColor: colors[1] }} ref={highlightPointers[1]}>{props.children}</mark>;\r\n  };\r\n\r\n  const PinkHighlight = (props) => {\r\n    return <mark style={{ backgroundColor: colors[2] }} ref={highlightPointers[2]}>{props.children}</mark>;\r\n  };\r\n\r\n  const GreenHighlight = (props) => {\r\n    return <mark style={{ backgroundColor: colors[3] }} ref={highlightPointers[3]}>{props.children}</mark>;\r\n  };\r\n\r\n  const RedHighlight = (props) => {\r\n    return <mark style={{ backgroundColor: colors[4] }} ref={highlightPointers[4]}>{props.children}</mark>;\r\n  };\r\n\r\n  const OrangeHighlight = (props) => {\r\n    return <mark style={{ backgroundColor: colors[5] }} ref={highlightPointers[5]}>{props.children}</mark>;\r\n  };\r\n\r\n  const GrayHighlight = (props) => {\r\n    return <mark style={{ backgroundColor: colors[6] }} ref={highlightPointers[6]}>{props.children}</mark>;\r\n  };\r\n\r\n  const highlightComponents = [YellowHighlight, AquaHighlight, PinkHighlight, GreenHighlight, RedHighlight, OrangeHighlight, GrayHighlight];\r\n\r\n  const saveCurrentSearch = newSearch => {\r\n    setSearch(newSearch.target.value);\r\n  }\r\n\r\n  const saveCurrentText = newText => {\r\n    if (newText !== text)\r\n      setHighlights([]);\r\n    setText(newText);\r\n  }\r\n\r\n  const processData = data => {\r\n    for (let i = 0; i < searches.length; i++) {\r\n      let start = data[searches[i]][0][2][0];\r\n      let end = data[searches[i]][0][2][1];\r\n      setHighlights(oldArray => [...oldArray, {component: highlightComponents[i], highlight: [start, end-1], className: colors[i]}]);\r\n    }\r\n  }\r\n\r\n  const scrollToHighlight = (highlightRef) => {\r\n    highlightRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n\r\n  async function getScores() {\r\n    let data = {\"text\": text,\r\n    \"labels\": searches};\r\n    const response = await fetch(\"https://flask.thomaswoodside.com/classify\", {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Card style={{marginRight: 300, marginLeft: 300, marginTop: 50}}>\r\n          <CardContent>\r\n            <Typography sx={{ fontSize: 16, fontFamily: 'Avanta Garde' }}>\r\n              Welcome! This is an interactive interface that will let you search for \"ideas\" in text. Type in any queries or questions you have about a certain text and find the answers to them indicated by the corresponding colored highlights.\r\n              You can click on the button for a given search to automatically locate the corresponding answer in the text. Note: This app supports up to 7 searches at a time.\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n        <div className=\"flexbox-container\">\r\n          <Card style={{flex:1, marginLeft:100, marginBottom: 50, marginRight:50, marginTop: 50, width: 200, height: 600, overflowY: 'scroll'}}>\r\n            <CardContent style={{}}>\r\n              <HighlightWithinTextarea\r\n                value={text}\r\n                highlight={highlights}\r\n                onChange= {saveCurrentText}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n          <div className='clear-buttons'>\r\n            <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setText(\"\");\r\n              setHighlights([]);\r\n            }}\r\n            >\r\n              Clear Text\r\n            </Button>\r\n            <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setSearches([]);\r\n              setSearch(\"\");\r\n              setHighlights([]);\r\n            }}\r\n            >\r\n              Clear Searches\r\n            </Button>\r\n          </div>\r\n          <Card style={{flex:1, marginLeft:50, marginBottom: 50, marginRight:100, marginTop: 50, width: 1000}}>            \r\n            <CardActions>\r\n              <Container>\r\n                <TextField\r\n                  placeholder=\"Enter search here\"\r\n                  value={currentSearch}\r\n                  onChange={saveCurrentSearch}\r\n                >\r\n                </TextField>\r\n              </Container>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  if (searches.length > 6) {\r\n                    alert(\"You have reached the search limit. Please delete a search to allow another.\");\r\n                  } else if (searches.includes(currentSearch)) {\r\n                    alert(\"You already have this query!\");\r\n                  } else if (currentSearch == \"\") {\r\n                    alert(\"Please enter a query.\");\r\n                  } else {\r\n                    setSearches(oldArray => [...oldArray, currentSearch]);\r\n                  }\r\n                  setSearch(\"\");\r\n                }}\r\n              >\r\n              Add Search\r\n              </Button>\r\n            </CardActions>\r\n            <CardContent>\r\n              <Container style={{flexDirection: 'column', overflowY: 'scroll'}}>\r\n                {\r\n                searches.map((elem, index) => (\r\n                  <Button \r\n                  startIcon={<CircleIcon style={{fill: colors[index]}}/>} \r\n                  endIcon={\r\n                    <CloseIcon\r\n                      onClick={\r\n                        () => {\r\n                          console.log(highlights);\r\n                          setSearches(searches.filter(item => item !== elem));\r\n                          setHighlights([]);\r\n                        }\r\n                      }\r\n                    />\r\n                  }\r\n                  onClick={() => {scrollToHighlight(highlightPointers[index])}} \r\n                  variant=\"contained\" \r\n                  sx={{borderRadius: 30}}\r\n                  key={elem}\r\n                  >\r\n                  {elem}\r\n                  </Button>\r\n                ))\r\n                }\r\n              </Container>\r\n              <Button\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                setHighlights([]);\r\n                getScores().then(data => {console.log(data); processData(data);})\r\n              }}\r\n              >\r\n              Run\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}